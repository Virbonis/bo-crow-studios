import {
  MapListSpecialBasket,
  gameTypeDescription,
  getGameTypeOptions,
  getRoundOptions,
} from 'helper'

describe('options', () => {
  describe('getGameTypeOptions', () => {
    test('FromPage is breakdown', () =>
      expect(getGameTypeOptions('breakdown')).toEqual(
        [
          { value: -98, label: '- Forecast -' },
          { value: 0, label: 'Handicap' },
          { value: 2, label: 'FH. Handicap' },
          { value: 5, label: 'Over/Under' },
          { value: 6, label: 'FH. Over/Under' },
          { value: 3, label: 'Odd/Even' },
          { value: 16, label: 'FH. Odd/Even' },
          { value: 1, label: '1X2' },
          { value: 8, label: 'FH. 1X2' },
          { value: 15, label: 'Double Chance' },
          { value: 7, label: 'Total Goal' },
          { value: 36, label: 'FH. Total Goal' },
          { value: 9, label: 'Half Time/Full Time' },
          { value: 10, label: 'Correct Score' },
          { value: 1001, label: 'Correct Score (Live)' },
          { value: 13, label: 'FH. Correct Score' },
          { value: 1002, label: 'FH. Correct Score (Live)' },
          { value: 14, label: 'First Goal/Last Goal' },
          { value: 12, label: 'Money Line' },
          { value: 17, label: 'FH. Money Line' },
          { value: -1, label: 'Mix Parlay' },
          { value: 11, label: 'Outright' },
          { value: 20, label: 'Both Teams To Score' },
          { value: 41, label: '2nd Half Both Teams To Score' },
          { value: 37, label: 'Home No Bet' },
          { value: 38, label: 'Away No Bet' },
          { value: 28, label: 'Draw No Bet' },
          { value: 42, label: 'Home to Win Either Half' },
          { value: 43, label: 'Away to Win Either Half' },
          { value: 44, label: 'Home to Win Both Halves' },
          { value: 45, label: 'Away to Win Both Halves' },
          { value: 26, label: 'To Score Both Halves' },
          { value: 46, label: 'Home to Score Both Halves' },
          { value: 47, label: 'Away to Score Both Halves' },
          { value: 30, label: 'Highest Scoring Half' },
          { value: 48, label: 'Highest Scoring Half Home Team' },
          { value: 49, label: 'Highest Scoring Half Away Team' },
          { value: 29, label: 'Half With Most Corners' },
          { value: 23, label: 'Race To 2 Goals' },
          { value: 24, label: 'Race To 3 Goals' },
          { value: 33, label: 'To Win From Behind' },
          { value: 34, label: 'To Win To Nil' },
          { value: 22, label: 'Penalty Awarded' },
          { value: 39, label: '3 Way Handicap' },
          { value: 40, label: 'Clean Sheet' },
          { value: 21, label: 'First Goal Method' },
          { value: 27, label: 'Injury Time Awarded At End Of 2nd Half' },
          { value: 25, label: 'Time Of The First Goal' },
          { value: 35, label: 'Winning Margin' },

          { value: 59, label: 'Next Corner' },
          { value: 60, label: 'Next Goal' },

          { value: 50, label: 'Game Handicap' },
          { value: 61, label: 'Game Over/Under' },
          { value: 62, label: 'Game Odd/Even' },
          { value: 63, label: 'Home Win Not Win' },
          { value: 64, label: 'Away Win Not Win' },

          { value: 1101, label: 'Set 1 Winner' },
          { value: 1102, label: 'Set 1 Game Handicap' },
          { value: 1103, label: 'Set 1 Game Handicap OU' },
          { value: 1116, label: 'Set 1 Game OE' },
          { value: 1104, label: 'Set 2 Winner' },
          { value: 1105, label: 'Set 2 Game Handicap' },
          { value: 1106, label: 'Set 2 Game Handicap OU' },
          { value: 1117, label: 'Set 2 Game OE' },
          { value: 1107, label: 'Set 3 Winner' },
          { value: 1108, label: 'Set 3 Game Handicap' },
          { value: 1109, label: 'Set 3 Game Handicap OU' },
          { value: 1118, label: 'Set 3 Game OE' },
          { value: 1110, label: 'Set 4 Winner' },
          { value: 1111, label: 'Set 4 Game Handicap' },
          { value: 1112, label: 'Set 4 Game Handicap OU' },
          { value: 1119, label: 'Set 4 Game OE' },
          { value: 1113, label: 'Set 5 Winner' },
          { value: 1114, label: 'Set 5 Game Handicap' },
          { value: 1115, label: 'Set 5 Game Handicap OU' },
          { value: 1120, label: 'Set 5 Game OE' },
          { value: 5000, label: 'BTI' },
        ]
          .concat(
            Object.values(MapListSpecialBasket)
              .flat()
              .map(e => ({ value: e, label: gameTypeDescription[e].long })),
          )
          .concat([
            { value: 3000, label: 'Bet Builder' },
            { value: 77, label: 'Virtual Sport' },
            { value: 4000, label: 'Lottery' },
          ]),
      ))
    test('FromPage is not voidticket', () =>
      expect(getGameTypeOptions('voidticket')).toEqual(
        [
          { value: 0, label: 'Handicap' },
          { value: 2, label: 'FH. Handicap' },
          { value: 5, label: 'Over/Under' },
          { value: 6, label: 'FH. Over/Under' },
          { value: 3, label: 'Odd/Even' },
          { value: 16, label: 'FH. Odd/Even' },
          { value: 1, label: '1X2' },
          { value: 8, label: 'FH. 1X2' },
          { value: 15, label: 'Double Chance' },
          { value: 7, label: 'Total Goal' },
          { value: 36, label: 'FH. Total Goal' },
          { value: 9, label: 'Half Time/Full Time' },
          { value: 10, label: 'Correct Score' },
          { value: 1001, label: 'Correct Score (Live)' },
          { value: 13, label: 'FH. Correct Score' },
          { value: 1002, label: 'FH. Correct Score (Live)' },
          { value: 14, label: 'First Goal/Last Goal' },
          { value: 12, label: 'Money Line' },
          { value: 17, label: 'FH. Money Line' },
          { value: -1, label: 'Mix Parlay' },
          { value: 11, label: 'Outright' },
          { value: 20, label: 'Both Teams To Score' },
          { value: 41, label: '2nd Half Both Teams To Score' },
          { value: 37, label: 'Home No Bet' },
          { value: 38, label: 'Away No Bet' },
          { value: 28, label: 'Draw No Bet' },
          { value: 42, label: 'Home to Win Either Half' },
          { value: 43, label: 'Away to Win Either Half' },
          { value: 44, label: 'Home to Win Both Halves' },
          { value: 45, label: 'Away to Win Both Halves' },
          { value: 26, label: 'To Score Both Halves' },
          { value: 46, label: 'Home to Score Both Halves' },
          { value: 47, label: 'Away to Score Both Halves' },
          { value: 30, label: 'Highest Scoring Half' },
          { value: 48, label: 'Highest Scoring Half Home Team' },
          { value: 49, label: 'Highest Scoring Half Away Team' },
          { value: 29, label: 'Half With Most Corners' },
          { value: 23, label: 'Race To 2 Goals' },
          { value: 24, label: 'Race To 3 Goals' },
          { value: 33, label: 'To Win From Behind' },
          { value: 34, label: 'To Win To Nil' },
          { value: 22, label: 'Penalty Awarded' },
          { value: 39, label: '3 Way Handicap' },
          { value: 40, label: 'Clean Sheet' },
          { value: 21, label: 'First Goal Method' },
          { value: 27, label: 'Injury Time Awarded At End Of 2nd Half' },
          { value: 25, label: 'Time Of The First Goal' },
          { value: 35, label: 'Winning Margin' },

          { value: 59, label: 'Next Corner' },
          { value: 60, label: 'Next Goal' },

          { value: 50, label: 'Game Handicap' },
          { value: 61, label: 'Game Over/Under' },
          { value: 62, label: 'Game Odd/Even' },
          { value: 63, label: 'Home Win Not Win' },
          { value: 64, label: 'Away Win Not Win' },

          { value: 1101, label: 'Set 1 Winner' },
          { value: 1102, label: 'Set 1 Game Handicap' },
          { value: 1103, label: 'Set 1 Game Handicap OU' },
          { value: 1116, label: 'Set 1 Game OE' },
          { value: 1104, label: 'Set 2 Winner' },
          { value: 1105, label: 'Set 2 Game Handicap' },
          { value: 1106, label: 'Set 2 Game Handicap OU' },
          { value: 1117, label: 'Set 2 Game OE' },
          { value: 1107, label: 'Set 3 Winner' },
          { value: 1108, label: 'Set 3 Game Handicap' },
          { value: 1109, label: 'Set 3 Game Handicap OU' },
          { value: 1118, label: 'Set 3 Game OE' },
          { value: 1110, label: 'Set 4 Winner' },
          { value: 1111, label: 'Set 4 Game Handicap' },
          { value: 1112, label: 'Set 4 Game Handicap OU' },
          { value: 1119, label: 'Set 4 Game OE' },
          { value: 1113, label: 'Set 5 Winner' },
          { value: 1114, label: 'Set 5 Game Handicap' },
          { value: 1115, label: 'Set 5 Game Handicap OU' },
          { value: 1120, label: 'Set 5 Game OE' },
          { value: 5000, label: 'BTI' },
        ].concat(
          Object.values(MapListSpecialBasket)
            .flat()
            .map(e => ({ value: e, label: gameTypeDescription[e].long })),
        ),
      ))
    test('FromPage is breakdown', () =>
      expect(getGameTypeOptions('breakdown')).toEqual(
        [
          { value: -98, label: '- Forecast -' },
          { value: 0, label: 'Handicap' },
          { value: 2, label: 'FH. Handicap' },
          { value: 5, label: 'Over/Under' },
          { value: 6, label: 'FH. Over/Under' },
          { value: 3, label: 'Odd/Even' },
          { value: 16, label: 'FH. Odd/Even' },
          { value: 1, label: '1X2' },
          { value: 8, label: 'FH. 1X2' },
          { value: 15, label: 'Double Chance' },
          { value: 7, label: 'Total Goal' },
          { value: 36, label: 'FH. Total Goal' },
          { value: 9, label: 'Half Time/Full Time' },
          { value: 10, label: 'Correct Score' },
          { value: 1001, label: 'Correct Score (Live)' },
          { value: 13, label: 'FH. Correct Score' },
          { value: 1002, label: 'FH. Correct Score (Live)' },
          { value: 14, label: 'First Goal/Last Goal' },
          { value: 12, label: 'Money Line' },
          { value: 17, label: 'FH. Money Line' },
          { value: -1, label: 'Mix Parlay' },
          { value: 11, label: 'Outright' },
          { value: 20, label: 'Both Teams To Score' },
          { value: 41, label: '2nd Half Both Teams To Score' },
          { value: 37, label: 'Home No Bet' },
          { value: 38, label: 'Away No Bet' },
          { value: 28, label: 'Draw No Bet' },
          { value: 42, label: 'Home to Win Either Half' },
          { value: 43, label: 'Away to Win Either Half' },
          { value: 44, label: 'Home to Win Both Halves' },
          { value: 45, label: 'Away to Win Both Halves' },
          { value: 26, label: 'To Score Both Halves' },
          { value: 46, label: 'Home to Score Both Halves' },
          { value: 47, label: 'Away to Score Both Halves' },
          { value: 30, label: 'Highest Scoring Half' },
          { value: 48, label: 'Highest Scoring Half Home Team' },
          { value: 49, label: 'Highest Scoring Half Away Team' },
          { value: 29, label: 'Half With Most Corners' },
          { value: 23, label: 'Race To 2 Goals' },
          { value: 24, label: 'Race To 3 Goals' },
          { value: 33, label: 'To Win From Behind' },
          { value: 34, label: 'To Win To Nil' },
          { value: 22, label: 'Penalty Awarded' },
          { value: 39, label: '3 Way Handicap' },
          { value: 40, label: 'Clean Sheet' },
          { value: 21, label: 'First Goal Method' },
          { value: 27, label: 'Injury Time Awarded At End Of 2nd Half' },
          { value: 25, label: 'Time Of The First Goal' },
          { value: 35, label: 'Winning Margin' },

          { value: 59, label: 'Next Corner' },
          { value: 60, label: 'Next Goal' },

          { value: 50, label: 'Game Handicap' },
          { value: 61, label: 'Game Over/Under' },
          { value: 62, label: 'Game Odd/Even' },
          { value: 63, label: 'Home Win Not Win' },
          { value: 64, label: 'Away Win Not Win' },

          { value: 1101, label: 'Set 1 Winner' },
          { value: 1102, label: 'Set 1 Game Handicap' },
          { value: 1103, label: 'Set 1 Game Handicap OU' },
          { value: 1116, label: 'Set 1 Game OE' },
          { value: 1104, label: 'Set 2 Winner' },
          { value: 1105, label: 'Set 2 Game Handicap' },
          { value: 1106, label: 'Set 2 Game Handicap OU' },
          { value: 1117, label: 'Set 2 Game OE' },
          { value: 1107, label: 'Set 3 Winner' },
          { value: 1108, label: 'Set 3 Game Handicap' },
          { value: 1109, label: 'Set 3 Game Handicap OU' },
          { value: 1118, label: 'Set 3 Game OE' },
          { value: 1110, label: 'Set 4 Winner' },
          { value: 1111, label: 'Set 4 Game Handicap' },
          { value: 1112, label: 'Set 4 Game Handicap OU' },
          { value: 1119, label: 'Set 4 Game OE' },
          { value: 1113, label: 'Set 5 Winner' },
          { value: 1114, label: 'Set 5 Game Handicap' },
          { value: 1115, label: 'Set 5 Game Handicap OU' },
          { value: 1120, label: 'Set 5 Game OE' },
          { value: 5000, label: 'BTI' },
        ]
          .concat(
            Object.values(MapListSpecialBasket)
              .flat()
              .map(e => ({ value: e, label: gameTypeDescription[e].long })),
          )
          .concat([
            { value: 3000, label: 'Bet Builder' },
            { value: 77, label: 'Virtual Sport' },
            { value: 4000, label: 'Lottery' },
          ]),
      ))
  })
  describe('getRoundOptions', () => {
    test('sportID is 10', () => {
      expect(getRoundOptions(10)).toEqual([
        { value: 0, label: 'Not Played' },
        { value: 1, label: '1st Start' },
        { value: 2, label: 'HT' },
        { value: 3, label: '2nd Start' },
        { value: 4, label: 'FT' },
        { value: 5, label: 'Extra Time 1' },
        { value: 7, label: 'ET HT' },
        { value: 6, label: 'Extra Time 2' },
      ])
    })
    test('sportID is 12', () => {
      expect(getRoundOptions(12)).toEqual([
        { value: 0, label: 'Not Played' },
        { value: 11, label: 'Q1' },
        { value: 12, label: 'Q2' },
        { value: 13, label: 'Q3' },
        { value: 14, label: 'Q4' },
        { value: 15, label: '1H' },
        { value: 16, label: '2H' },
        { value: 19, label: 'OT' },
      ])
    })
    test('sportID is 56', () => {
      expect(getRoundOptions(56)).toEqual([
        { value: 0, label: 'Not Played' },
        { value: 31, label: 'Round 1' },
        { value: 32, label: 'Round 2' },
        { value: 33, label: 'Round 3' },
        { value: 34, label: 'Round 4' },
        { value: 35, label: 'Round 5' },
      ])
    })
    test('sportID is NULL', () => {
      expect(getRoundOptions(null)).toEqual([])
    })
  })
})
